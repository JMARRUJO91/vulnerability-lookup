#!/usr/bin/env python3

import hashlib
import json
from datetime import datetime
from dateutil.parser import parse  # type: ignore[import-untyped]

from typing import Any, Dict

import cvss  # type: ignore[import-untyped]
import markdown  # type: ignore[import-untyped]


def str_to_obj(str: str) -> Dict[str, Any]:
    """Returns a Python object from a (JSON) string."""
    try:
        return json.loads(str)
    except Exception:
        return {"message": "Error when deserializing the string."}


def datetimeformat(value: datetime, format: str = "%Y-%m-%d %H:%M") -> str:
    """Converts a datetime obect to a formatted string."""
    return value.strftime(format)


def string_to_datetime(value: str, format: str = "") -> str:
    """Converts the format of a formatted string."""
    now = datetime.now()
    try:
        new_date_time = parse(value)
    except Exception:
        return value
    if format:
        return datetimeformat(new_date_time, format)
    elif new_date_time.year == now.year and new_date_time.month == now.month:
        return datetimeformat(new_date_time, "%d")
    elif new_date_time.year == now.year:
        return datetimeformat(new_date_time, "%b %d")
    else:
        return datetimeformat(new_date_time)


def to_markdown(value: str) -> str:
    """Converts a markdown string to HTML."""
    try:
        return markdown.markdown(value)
    except Exception:
        return value


def hash(value: str) -> str:
    """Returns a hexadecimal SHA 256 hash of the input value."""
    m = hashlib.sha256()
    m.update(value.encode())
    return m.hexdigest()


def cvss_base_score(vector: str, version: str) -> str:
    """Returns the base code from a CVSS vector."""
    if version in ["cvssV4_0", "CVSS_V4", "cvssV4_0"]:
        c = cvss.CVSS4(vector)
        return str(c.base_score)
    elif version in ["cvssV3_0", "CVSS_V3", "cvssV3_1"]:
        c = cvss.CVSS3(vector)
        return ", ".join(
            [str(score) for score in c.scores()[:1]]
        )  # slice the list to ignore temporal and environmental scores
    return vector


def cvss_severity(vector: str, version: str) -> str:
    """Returns the severity from a CVSS vector."""
    if version in ["cvssV4_0", "CVSS_V4", "cvssV4_0"]:
        c = cvss.CVSS4(vector)
        return str(c.severity)
    elif version in ["cvssV3_0", "CVSS_V3", "cvssV3_1"]:
        c = cvss.CVSS3(vector)
        return ", ".join(
            [str(score) for score in c.severities()[:1]]
        )  # slice the list to ignore temporal and environmental scores
    return vector


def cvss_clean_vector(vector: str, version: str) -> str:
    """Returns a clean version of a vector."""
    if version in ["cvssV4_0", "CVSS_V4", "cvssV4_0"]:
        c = cvss.CVSS4(vector)
        return c.clean_vector()
    elif version in ["cvssV3_0", "CVSS_V3", "cvssV3_1"]:
        c = cvss.CVSS3(vector)
        return c.clean_vector()
    return vector
