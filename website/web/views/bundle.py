#!/usr/bin/env python3

from datetime import timezone

import markdown  # type: ignore[import-untyped]
from feedgen.feed import FeedGenerator  # type: ignore[import-untyped]
from flask import (
    abort,
    Blueprint,
    flash,
    request,
    redirect,
    render_template,
    make_response,
    Response,
    url_for,
)
from flask_login import login_required  # type: ignore[import-untyped]
from flask_paginate import get_page_args  # type: ignore[import-untyped]
from werkzeug import Response as WerkzeugResponse

from vulnerabilitylookup.default import get_config
from website.models import Bundle
from website.web.bootstrap import application
from website.web.bootstrap import db
from website.web.permissions import admin_permission

bundle_bp = Blueprint(
    "bundle_bp", __name__, url_prefix="/bundle", template_folder="bundles"
)
bundles_bp = Blueprint(
    "bundles_bp", __name__, url_prefix="/bundles", template_folder="bundles"
)

local_instance_name = get_config("generic", "local_instance_name").lower()


@bundles_bp.route("/", methods=["GET"])
def list_bundles() -> str:
    return render_template("bundles/bundles.html")


@bundle_bp.route("/<uuid:bundle_uuid>", methods=["GET"])
def get(bundle_uuid: str = "") -> str:
    """Return details about the bundle."""
    elem = Bundle.query.filter(Bundle.uuid == bundle_uuid).first()
    if elem is None:
        abort(404)
    html_from_markdown = markdown.markdown(elem.description)
    return render_template(
        "bundles/bundle.html", bundle=elem, description=html_from_markdown
    )


@bundle_bp.route("/create", methods=["GET"])
@bundle_bp.route("/edit/<uuid:bundle_uuid>", methods=["GET"])
@login_required  # type: ignore[misc]
@admin_permission.require(http_exception=403)  # type: ignore[misc]
def form(bundle_uuid: str = "") -> str:
    """Returns a page in order to create or edit a bundle.
    Only available to administrators."""
    action = "Create a bundle"
    head_titles = [action]

    if not bundle_uuid:
        # Creation of a new bundle
        return render_template(
            "bundles/edit_bundle.html",
            action=action,
            head_titles=head_titles,
            bundle={},
        )

    # Edition of an existing bundle
    bundle = Bundle.query.filter(Bundle.uuid == bundle_uuid).first()
    action = "Edit a bundle"
    head_titles = [action]
    head_titles.append(bundle.name)
    return render_template(
        "bundles/edit_bundle.html",
        action=action,
        head_titles=head_titles,
        bundle=bundle,
    )


@bundle_bp.route("/delete/<uuid:bundle_uuid>", methods=["GET"])
@login_required  # type: ignore[misc]
@admin_permission.require(http_exception=403)  # type: ignore[misc]
def delete_bundle(bundle_uuid: str) -> WerkzeugResponse:
    """Delete a bundle.
    Only available to administrators."""
    bundle = Bundle.query.filter(Bundle.uuid == bundle_uuid).first()
    if bundle is None:
        abort(404)
    db.session.delete(bundle)
    db.session.commit()
    flash("Bundle deleted.", "success")
    return redirect(url_for("bundles_bp.list_bundles"))


@bundles_bp.route("/feed.<string:format>", defaults={"per_page": 10}, methods=["GET"])
def feed_bundles(per_page: int = 10, format: str = "atom") -> Response:
    """RSS/ATOM feed for the recent bundles."""
    user = request.args.get("user", "")
    public_domain = get_config("generic", "public_domain")
    _, per_page, offset = get_page_args(
        page_parameter="page", per_page_parameter="per_page"
    )
    feed_max_per_page = application.config.get("FEED_MAX_PER_PAGE", 50)
    if per_page > feed_max_per_page:
        per_page = feed_max_per_page
    fg = FeedGenerator()
    fg.id(f"https://{public_domain}/bundles/feed.{format}")
    fg.title(f"Most recent bundles.")
    fg.subtitle(f"Contains only the most {per_page} recent bundles.")
    fg.author(
        {
            "name": "Vulnerability Lookup",
            "email": application.config.get("ADMIN_EMAIL", ""),
        }
    )
    fg.link(href=f"https://{public_domain}", rel="alternate")
    fg.language("en")

    query = Bundle.query
    if user:
        query = query.filter(Bundle.author.has(login=user))
    query = query.order_by(Bundle.timestamp.desc())
    bundles = query.offset(offset).limit(per_page)

    for bundle in bundles:
        fe = fg.add_entry()
        fe.id(f"https://{public_domain}/bundle/{bundle.uuid}")
        fe.title(bundle.name)
        fe.link(href=f"https://{public_domain}/bundle/{bundle.uuid}")
        fe.content(bundle.description)
        fe.description(bundle.description)
        fe.published(bundle.timestamp.replace(tzinfo=timezone.utc))
    if format == "atom":
        feed = fg.atom_str(pretty=True)
    else:
        feed = make_response(fg.rss_str(pretty=True))
        feed.mimetype = "application/rss+xml"
        feed.headers["Content-Type"] = "application/rss+xml"
    return feed
