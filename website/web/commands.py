#!/usr/bin/env python3

import sys
import click

import website.models
import website.scripts
from website.models import User
from website.web.bootstrap import application, db


@application.cli.command("db_init")
def db_init() -> None:
    "Will create the database from conf parameters."
    with application.app_context():
        website.models.db_init(db)


@application.cli.command("db_create")
def db_create() -> None:
    "Will create the database."
    with application.app_context():
        website.models.db_create(
            db,
            application.config["DB_CONFIG_DICT"],
            application.config["DATABASE_NAME"],
        )


@application.cli.command("create_user")
@click.option("--login", default="admin", help="Login")
@click.option("--email", default="admin@admin.localhost", help="Email")
@click.option("--password", default="password", help="Password")
def create_user(login: str, email: str, password: str) -> None:
    "Initializes a user"
    print(f"Creation of the user {login}…")
    with application.app_context():
        website.scripts.create_user(login, email, password, True, True, False, False, True)


@application.cli.command("create_admin")
@click.option("--login", default="admin", help="Login")
@click.option("--email", default="admin@admin.localhost", help="Email")
@click.option("--password", default="password", help="Password")
def create_admin(login: str, email: str, password: str) -> None:
    "Initializes an admin user"
    print(f"Creation of the admin user {login}…")
    with application.app_context():
        website.scripts.create_user(login, email, password, True, True, True, True, True)


@application.cli.command("user_get_api_key")
@click.option("--login", default="admin", help="Login")
def user_get_api_key(
    login: str,
) -> None:
    "Returns the API key of a user."
    user = User.query.filter(User.login == login).first()
    print(user.apikey)


@application.cli.command("user_list")
def user_list() -> None:
    """List all users."""
    for user in User.query.all():
        print(user)
        print()


@application.cli.command("user_delete")
@click.option("--login", default="", help="Login of the user to delete.")
@click.option(
    "-y",
    "--yes",
    is_flag=True,
    help="Automatically reply yes to the confirmation message.",
)
def user_delete(login: str, yes: str) -> None:
    """Delete the user specified with its login."""
    if yes or click.confirm("Delete the user?"):
        try:
            user = User.query.filter(User.login == login).first()
            if user:
                db.session.delete(user)
                db.session.commit()
            else:
                print("No such user.", file=sys.stderr)
        except Exception as e:
            print(e)
